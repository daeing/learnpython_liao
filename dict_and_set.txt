dict
Python中内置了字典： dict全称为dictionary，在其他语言中被称为map，使用k-v存储，
具有极快的查找速度。 如 names=['Michael', 'Bob', 'Tracy'] scores=[95, 75, 85]
d={'Michael:95,'Bob:75,'Tracy':85}   d['Michael']   得到95
给dict赋值：d['Jack'] = 90 这要是别的语言的话就会觉得很奇怪

通过dict提供的get()方法，如果key不存在，可以返回None，或者自己指定的value：
d.get('Thomas')
d.get('Thomas', -1)
-1
注意：返回None的时候Python的交互环境不显示结果。

要删除一个key，用pop(key)方法，对应的value也会从dict中删除：
d.pop('Bob')
75
d
{'Michael': 95, 'Tracy': 85}

和list比较，dict有以下几个特点：
查找和插入的速度极快，不会随着key的增加而变慢；
需要占用大量的内存，内存浪费多。

而list相反：
查找和插入的时间随着元素的增加而增加；
占用空间小，浪费内存很少。
所以，dict是用空间来换取时间的一种方法。

正确使用dict非常重要，需要牢记的第一条就是dict的key必须是不可变对象。
在Python中，字符串、整数等都是不可变的，因此，
可以放心地作为key。而list是可变的，就不能作为key。

set
set和dict类似，也是一组key的集合，但不存储value。
由于key不能重复，所以，在set中，没有重复的key。

要创建一个set，需要提供一个list作为输入集合：
>>> s = set([1, 2, 3])
>>> s
{1, 2, 3} # 注意，这边是大括号，不同于list的中括号哦

重复元素在set中自动被过滤：
>>> s = set([1, 1, 2, 2, 3, 3])
>>> s
{1, 2, 3}

通过add(key)方法可以添加元素到set中，可以重复添加，但不会有效果：
>>> s.add(4)
>>> s
{1, 2, 3, 4}
>>> s.add(4)
>>> s
{1, 2, 3, 4}

通过remove(key)方法可以删除元素：
>>> s.remove(4)
>>> s
{1, 2, 3}

set可以看成数学意义上的无序和无重复元素的集合，因此，
两个set可以做数学意义上的交集、并集等操作：
>>> s1 = set([1, 2, 3])
>>> s2 = set([2, 3, 4])
>>> s1 & s2
{2, 3}
>>> s1 | s2
{1, 2, 3, 4}



















